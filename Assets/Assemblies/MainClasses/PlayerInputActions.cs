//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Assemblies/MainClasses/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""DiceRolling"",
            ""id"": ""c47206a5-695e-41ff-9a65-4c3b29212662"",
            ""actions"": [
                {
                    ""name"": ""RollDie1"",
                    ""type"": ""Button"",
                    ""id"": ""f2fa172b-12cf-423d-88bd-ea7587f9439d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RollDie2"",
                    ""type"": ""Button"",
                    ""id"": ""d1f2eaf0-c565-4671-9cbe-fbacedb2bfd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RollDie3"",
                    ""type"": ""Button"",
                    ""id"": ""5dce52c0-b858-4d1c-bed8-0073fb2bf6ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ff9c44e2-941f-4be3-a041-5eeef74f2010"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollDie1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c990423d-1550-42a4-b32d-a02d2b1dedc1"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollDie2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49573ef7-fe27-4860-8216-d73f6cb775e2"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollDie3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DiceAttack"",
            ""id"": ""cc8e4f79-87ff-45de-8d8e-0c72d6dd0744"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""4472d964-da19-4b80-9e0c-becc1ef6c558"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3dd04a84-5cc6-4817-a9bc-c2943b9a1f57"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DiceRolling
        m_DiceRolling = asset.FindActionMap("DiceRolling", throwIfNotFound: true);
        m_DiceRolling_RollDie1 = m_DiceRolling.FindAction("RollDie1", throwIfNotFound: true);
        m_DiceRolling_RollDie2 = m_DiceRolling.FindAction("RollDie2", throwIfNotFound: true);
        m_DiceRolling_RollDie3 = m_DiceRolling.FindAction("RollDie3", throwIfNotFound: true);
        // DiceAttack
        m_DiceAttack = asset.FindActionMap("DiceAttack", throwIfNotFound: true);
        m_DiceAttack_Attack = m_DiceAttack.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DiceRolling
    private readonly InputActionMap m_DiceRolling;
    private IDiceRollingActions m_DiceRollingActionsCallbackInterface;
    private readonly InputAction m_DiceRolling_RollDie1;
    private readonly InputAction m_DiceRolling_RollDie2;
    private readonly InputAction m_DiceRolling_RollDie3;
    public struct DiceRollingActions
    {
        private @PlayerInputActions m_Wrapper;
        public DiceRollingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RollDie1 => m_Wrapper.m_DiceRolling_RollDie1;
        public InputAction @RollDie2 => m_Wrapper.m_DiceRolling_RollDie2;
        public InputAction @RollDie3 => m_Wrapper.m_DiceRolling_RollDie3;
        public InputActionMap Get() { return m_Wrapper.m_DiceRolling; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DiceRollingActions set) { return set.Get(); }
        public void SetCallbacks(IDiceRollingActions instance)
        {
            if (m_Wrapper.m_DiceRollingActionsCallbackInterface != null)
            {
                @RollDie1.started -= m_Wrapper.m_DiceRollingActionsCallbackInterface.OnRollDie1;
                @RollDie1.performed -= m_Wrapper.m_DiceRollingActionsCallbackInterface.OnRollDie1;
                @RollDie1.canceled -= m_Wrapper.m_DiceRollingActionsCallbackInterface.OnRollDie1;
                @RollDie2.started -= m_Wrapper.m_DiceRollingActionsCallbackInterface.OnRollDie2;
                @RollDie2.performed -= m_Wrapper.m_DiceRollingActionsCallbackInterface.OnRollDie2;
                @RollDie2.canceled -= m_Wrapper.m_DiceRollingActionsCallbackInterface.OnRollDie2;
                @RollDie3.started -= m_Wrapper.m_DiceRollingActionsCallbackInterface.OnRollDie3;
                @RollDie3.performed -= m_Wrapper.m_DiceRollingActionsCallbackInterface.OnRollDie3;
                @RollDie3.canceled -= m_Wrapper.m_DiceRollingActionsCallbackInterface.OnRollDie3;
            }
            m_Wrapper.m_DiceRollingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RollDie1.started += instance.OnRollDie1;
                @RollDie1.performed += instance.OnRollDie1;
                @RollDie1.canceled += instance.OnRollDie1;
                @RollDie2.started += instance.OnRollDie2;
                @RollDie2.performed += instance.OnRollDie2;
                @RollDie2.canceled += instance.OnRollDie2;
                @RollDie3.started += instance.OnRollDie3;
                @RollDie3.performed += instance.OnRollDie3;
                @RollDie3.canceled += instance.OnRollDie3;
            }
        }
    }
    public DiceRollingActions @DiceRolling => new DiceRollingActions(this);

    // DiceAttack
    private readonly InputActionMap m_DiceAttack;
    private IDiceAttackActions m_DiceAttackActionsCallbackInterface;
    private readonly InputAction m_DiceAttack_Attack;
    public struct DiceAttackActions
    {
        private @PlayerInputActions m_Wrapper;
        public DiceAttackActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_DiceAttack_Attack;
        public InputActionMap Get() { return m_Wrapper.m_DiceAttack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DiceAttackActions set) { return set.Get(); }
        public void SetCallbacks(IDiceAttackActions instance)
        {
            if (m_Wrapper.m_DiceAttackActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_DiceAttackActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_DiceAttackActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_DiceAttackActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_DiceAttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public DiceAttackActions @DiceAttack => new DiceAttackActions(this);
    public interface IDiceRollingActions
    {
        void OnRollDie1(InputAction.CallbackContext context);
        void OnRollDie2(InputAction.CallbackContext context);
        void OnRollDie3(InputAction.CallbackContext context);
    }
    public interface IDiceAttackActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
}
